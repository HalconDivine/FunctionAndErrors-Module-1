// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Uplift {
    uint256 public Uniform;
    uint256 public Tuition;
    uint256 public Allowance;

    uint256 public lastUpdatedUniform;
    uint256 public lastUpdatedTuition;
    uint256 public lastUpdatedAllowance;
    uint256 public totalInLastUpdate;

    // Event to log updates
    event ValuesUpdated(
        uint256 uniform,
        uint256 tuition,
        uint256 allowance,
        uint256 lastUpdatedUniform,
        uint256 lastUpdatedTuition,
        uint256 lastUpdatedAllowance,
        uint256 totalInLastUpdate
    );

    // Function to set the values and update timestamps
    function setValues(
        uint256 _uniform,
        uint256 _tuition,
        uint256 _allowance,
        uint256 _lastUpdatedUniform,
        uint256 _lastUpdatedTuition,
        uint256 _lastUpdatedAllowance
    ) public {
        require(_uniform > 0 || _tuition > 0 || _allowance > 0, "Please Enter an Amount");

        Uniform = _uniform;
        Tuition = _tuition;
        Allowance = _allowance;

        lastUpdatedUniform = _lastUpdatedUniform;
        lastUpdatedTuition = _lastUpdatedTuition;
        lastUpdatedAllowance = _lastUpdatedAllowance;

        totalInLastUpdate = Uniform + Tuition + Allowance;

        emit ValuesUpdated(
            _uniform,
            _tuition,
            _allowance,
            _lastUpdatedUniform,
            _lastUpdatedTuition,
            _lastUpdatedAllowance,
            totalInLastUpdate
        );
    }

    // Function to get the total of Uniform, Tuition, and Allowance
    function getTotal() public view returns (uint256) {
        uint256 total = Uniform + Tuition + Allowance;
        assert(total > 0);  // Ensure the total is greater than 0
        return total;
    }

    // Function to revert if all values are zero
    function revertIfNoValues() public view {
        if (Uniform == 0 && Tuition == 0 && Allowance == 0) {
            revert("Please Enter an Amount");
        }
    }
}
